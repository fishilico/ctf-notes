static main() {
set_name(0x1420, "start");
set_name(0x1450, "__internal_ITM_deregisterTMCloneTable_ptr");
set_name(0x14e0, "__internal_fini");
set_name(0x1520, "__internal__init");
set_name(0x1550, "compare_with_root");
set_name(0x1581, "is_USER_root");
set_name(0x15ad, "child_main");
set_name(0x1755, "parent_process");
set_name(0x18c8, "main");
set_name(0x1a5b, "get_mapped_start_addr_from_proc_self_maps");
set_name(0x1b05, "ptrace_child");
set_name(0x1b6b, "BREAKPOINT_add_new");
set_name(0x1b95, "BREAKPOINT_add_new_with_cb");
set_name(0x1dff, "BREAKPOINT_reset_entry");
set_name(0x1f2f, "BREAKPOINT_reset_entry_with_offset");
set_name(0x1f5f, "BREAKPONT_remove_bp_in_child_zone");
set_name(0x1fe7, "BREAKPONT_restore_bp_in_child_zone");
set_name(0x20ba, "BREAKPOINT_set_orginal_byte_with_child_offset");
set_name(0x2114, "BREAKPOINT_handle_SIGTRAP_breakpoint");
set_name(0x22b7, "BREAKPOINT_run_as_if_triggered_with_CHILD_rip");
set_name(0x25e4, "read_child_mem_by_offset");
set_name(0x2610, "read_child_mem");
set_name(0x278b, "CHILD__xor_addr_with_value");
set_name(0x27f3, "write_child_mem_by_offset");
set_name(0x2829, "write_child_mem");
set_name(0x2990, "CHILD__memcpy");
set_name(0x29eb, "CHILD__hexdump_mem");
set_name(0x2af8, "CHILD__get_user_regs_struct");
set_name(0x2b37, "CHILD__set_user_regs_struct");
set_name(0x2b90, "CHILD__flip_ZF_if_0x7A");
set_name(0x2bec, "CHILD__get_reg_value");
set_name(0x2f0c, "CHILD__set_reg_value");
set_name(0x317a, "file_process_begin__load_function");
set_name(0x333d, "RUN_block_by_name");
set_name(0x33b8, "CHILD__emulate_call_with_child_offset");
set_name(0x3452, "CHILD__emulate_ret");
set_name(0x34e2, "get_child_offset_from_addr");
set_name(0x34fd, "transform_4bytes_into_3bytes_key_using_CRYPTO");
set_name(0x35b1, "decrypt_a_function");
set_name(0x42d6, "is_space");
set_name(0x4305, "parse_u64_from_linebuffer_with_static_var");
set_name(0x43b1, "parse_reg_name_and_get_value");
set_name(0x445c, "parse_token_and_return_kind");
set_name(0x45a5, "parse_next_token_given_current_kind");
set_name(0x4600, "parse_recurr__left_of_minus_star");
set_name(0x46f5, "parse_recurr__multiplication");
set_name(0x4752, "parse_recurr__right_of_plusminus");
set_name(0x4780, "parse_recurr__plus");
set_name(0x4818, "parse_expr__in_parenthesis");
set_name(0x4846, "RUN_line");
set_name(0x4f1b, "load_debug_script_file");
set_name(0x524e, "open_display_and_get_image");
set_name(0x5775, "decrypt_a_byte_from_the_file_and_do_things");
set_name(0x5a80, "ENC_fopen_with_read_4_bytes");
set_name(0x69e6, "start_routine");
set_name(0x72cd, "crypto_free_state");
set_name(0x730a, "crypto_keySchedule");
set_name(0x7429, "crypto_getByteStream");
set_name(0x752e, "crypto_encrypt_xorStreamCipher");
set_name(0x75cb, "base64_decode");
set_name(0x20b248, "g_breakpoint_list");
set_name(0x20b250, "g_pBlocks");
set_name(0x20b4b0, "g_child_pid");
set_name(0x20b4b8, "g_mapped_start_addr");
set_name(0x20b4c0, "g_level2_breakpoint_offsets_of_decrypted_fct");
set_name(0x20b680, "g_level2_breakpoint_end_offsets");
set_name(0x20b840, "g_level2_breakpoint_hitCounts_offset");
set_name(0x20ba00, "g_level2_breakpoint_hitCounts_max_2");
set_name(0x20bae0, "g_current_reg_name");
set_name(0x20bae8, "g_parser_current_u64_value");
set_name(0x20baf0, "g_pszCurrentlyRunningLine__pChar");
set_name(0x20baf8, "g_lastTokenKind");
set_name(0x20bb00, "g_p_crypto_state_of_child");
}
