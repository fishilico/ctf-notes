flag.txt.enc.b64
    512 bytes

orcale.py:
    sk = RSA-4096 key
    m = int(message)
    mp, dq = m % sk.q, sk.d % (sk.q - 1)
    mq, dp = m % sk.p, sk.d % (sk.p - 1)
    s1 = pow(mq, dq, sk.q)
    s2 = pow(mp, dp, sk.p)
    h = (sk.u * (s1 - s2)) % sk.q
    s = (s2 + h * sk.p) % sk.n
    return s

sk.u = 1/p mod q

s mod p = s2 mod p = m^(d mod (p-1)) mod p
s mod q = (s2 + h*p) mod q = (s2 + u*p*(s1 - s2)) mod q = s1 mod q = m^(d mod (q-1)) mod q


Solutions dans https://sentrywhale.com/writeup/anssi-2020-bugs-buggy

- backdoor 0x0ff1ce * 0xd15ea5e
- mp & mq ont été inversés ! => signature fausse, et PGCD possible pour un message entre p et q



What do you want me to sign?
>>> 2


>>> 3
143119010417793594614627054554816059412083880845431299914102487636793364205238626632088308674682570760386162496039369833953120879044381233350161945211720280090146776972120237029296586071041851428473803575179350416255015651178498829664207221825503578128421879569754299982670520273513602190362964645031561955856739001702498798554720972329159888423393881923150900329613240007323785758125085846635671542386681983403924492399359969204596479062654377988334313790537009197082893224934492438879049700263438998669987188887005808328643287847765513611285660488010740155351257190791611810283843677253558544758868635688856298606415764598129299993665215434503516124495352632483753159938783718857324986057289010815908751958298577506240739577254754682598624487496545441309579679296202584190183698245598126589709237483611024581973187329841055211489655309199982502362311433622040053505006704830094258570089032517047635137889769650472928258094875487448803175528781592557799516291139894053036436526775919936599989825962196411482069127435953482892447415600072821477354763749206645570579325518787677908614989303073714824120179611065443846601114731522727785572550975622513304264786751549374378554934639251003400325650892107192760238742250291803822726235612

import math
n = math.gcd((sign_2**0x10001) - 2, (sign_3**0x10001) - 3)
# Many hours later...
n = 634095176028178407580835393188432744995837848981906777431138587532013189373822307619863825563602026487117101865001660137364331096619597313098096112947998944812128891197422645964358207966486715181712720941228754821419649125170866267926750510278763159865802332362343716003809059104202676811803787092976460886724993213509738918877619233920850447330885282478940340746268497168281556212836593648708517397089549822789776138482132106314625977525571059500707299555900421432304989987170237589660875668300069628284395333692267729910192734496368889570350027148918404086079420180288113666897446050671115364337786324901496949572845198146902335174736461992298779752209578512544125188409425401505408016543124335424044739054284234544864344558274518777061424908537234260476496599262014502961148143182961028663272079254088772176237234409891787823311512202392960824265496946211692774732030274854085051893280273511048475240605495061392108195728904673867938056789035537148361609809659697066487012996191539987292864229113731414583678634287575944596346250547135266403963252717002937643037239228535436333116034394986913851772615325728155482349445336787403465117131555342758615562855223661158760728333242781657724108250929033557845321423217708708812875370323

math.isqrt(n)
25181246514582601329290492662057215900634483167104793585910575411903743214727483059165270293259575938016010247333581168936563766674321876998859691525028667921720960427539296609738825295277232390625387091204956394072641980459459206478585545441215846990626991716098949974252069659595815425224744708138974484189927218713976002399687326371601817716938380578104705937140264436886756162942172185383142097888529445502742069924818332788636548001674720377778133103116994276080937269938940283171793503084330402893369671407055387405171711977428783359845259155770784504957232078242507892958578189458704187311323830843647860325160

$ nc challenges1.france-cybersecurity-challenge.fr 2004
What do you want me to sign?
>>> 25181246514582601329290492662057215900634483167104793585910575411903743214727483059165270293259575938016010247333581168936563766674321876998859691525028667921720960427539296609738825295277232390625387091204956394072641980459459206478585545441215846990626991716098949974252069659595815425224744708138974484189927218713976002399687326371601817716938380578104705937140264436886756162942172185383142097888529445502742069924818332788636548001674720377778133103116994276080937269938940283171793503084330402893369671407055387405171711977428783359845259155770784504957232078242507892958578189458704187311323830843647860325160


Python:
>>> pow(sign_s, 0x10001, n) == s  # => False
>>> pow(sign_s, 0x10001, n) == s
False
>>> p = math.gcd(pow(sign_s, 0x10001, n) - s, n)
>>> n % p
0
>>> q = n // p
>>> p
23472240212906374785778775076191603140502175101090078999491234917298731143730516411981767162194092134138850727531430518725112269137882241196980562616116120066232498704513061441427685136154160650445729324042645866899352671947111498123324699085634364837587662809405182448300152192148667962039009269608469005762449379795806122650357487861677232449833852752321801686658048221956144774218567496511330944460822020442630422576615888276087915171304893547444532506429952904724664438405410186732667033013928910112322779754857658667324290775121310265141561984984579433617988863142793530321979328460568617753313999625290493584369
>>> q
27014685018412377955021193683692410712700598017905802820278974433053977668910741503144754174302359377389997015209662279272996738311082326357049469129617494762120394494917250025400322260275764195072539504177717649482497197018968631805440712716673400905502592834683325131221547684053892980917523076386668133582727860462053201395095087355612826357440924675569445598701246343570580907841098217032646821940399921101852753175559611238960095269903676369276284490016595190709254927305689478316758761537447064079996894791331797238805788125564658170357489227310750567067421774065511601996491728202694245635202614538330651630467
>>> n == p*q
True

>>> import base64
>>> encrypted = base64.b64decode(open('flag.txt.enc.b64', 'r').read().strip())
>>> encrypted_i = int.from_bytes(encrypted, 'big')
>>> import gmpy2
>>> d = gmpy2.invert(0x10001, (p-1)*(q-1))
>>> decrypted_i = pow(encrypted_i, d, n)
>>> int(decrypted_i).to_bytes(512, 'big')
b'\x00\x02#\x08A\xbfL4 \r\xd1\x0b\xfb_R\x84E\x7f\xb0n\xab,\x92g\xe8\xaaW\x0c\x16g\xf1\x9b%\xe3\xb8\xad\x0f\x83\x0b\xf5ys\xa23-\xaf\xd6C[V\xd0i\xe6~\x1e\xab\xf9M\xd0%\xee\x9b\x96\x1dQ#\x99\xffE\xec\x8fq\x19\xe3\x86\xb9Z\x83uiL\xfe\xc3Z\'\xb8\x8c\xb9\xfe>\xac\x93\xf2\xb6\xac\xb9Jp4\x83\xe8\xf3Q\xce\x84k\x95C\xaf\xc9\xbd\x8a\xd7\x93\x1d\xd8\x9b\xde\xe9\xfa\xf9!w\x03e,\x87\xc4\xfbh~\xcb[\xaf&\xd2\xca\xac\'\xb6\xa7c\xf4\n^J\xaf\'~\xed\x8f\x16\xc0mc\xfe\xf1\xfd\xa7h\t\xddli\x13:\xb86\x8c\xbb\x19\xcd\xdf\xebt\x95[\xb6\xbe~dyv\xab\x07\xe9\xa8\xc25\x0c\xe2\x02\xa7(\xf0\x0c\x8d\x8ca\x9a\xa4\xac\x9b\xda\xf5\xdd}\x86$\xe8\xb4)\xc6\xfc\xdb\xff\x021\xe0<\xa3\x9e\x81\xbf\xe8:\x13\xe4X\xac\xa0y\xbd\x1f\xd2\x90-\xabT\xdc\x95\xfdx2\xc7\xdb\xc3\\*\xcbZ\xd9\xd14P\xb5g\x13\xc8\'\xcd%\'\x12\x9b\x97 \xd6\rE\x110\xe0\x8fi\x04\xa7\x0cI*(\xa9\xaf$\xab\x7f\xb5\xe0\xfa\xed=\x19\xcf\xb0Nw\xd6J\xfcl%\xbb\x08\xf9q\xa2\x9cJ\xc6\x0c\x81A\xda\x98\x16[\xccD\x9b5\x15Z\xe2\x1ft\xab\xef\x07Pb\xa5\xca\xba]\xc9_Q/M\xb91\xaa""\x1eZ\x8b\xc7Ss\xed\xa9\xed\xaa\x9aK\xa0\r\xdee\xbem\xa3s\xb1\x15\x17\xe9\xa2\xaf\xa2\xf1No\xf1ur>\x1d\xc7\x0cE\x91%\x8dN\xcbv\xf4\x89\xe7\xa5\x03\x81[\xef\x88\xd0u\xce"W(z\xcc\x15L\x17\xa6\xb7\x1c\xc1s\xa7\xd5\x16J\xb9\xbd#\x9d2\xfd\xe9\xd2=\x9f\xb7\x15\xb7\xf8\x99\xd0{\xf6#\xd5X|E\x00FCSC{28000c5b341f5636245f4c4c214e8532ed174e0627e526bd761ec7a37b08eefa}\n'


Write-ups:

* https://sentrywhale.com/writeup/anssi-2020-bugs-buggy
